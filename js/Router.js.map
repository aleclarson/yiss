{
  "version": 3,
  "file": "Router.js",
  "sourceRoot": "..",
  "sources": [
    "src/Router.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "PathMatcher = require './PathMatcher'\nassertValid = require 'assertValid'\nvalido = require 'valido'\nRoute = require './Route'\nnoop = require 'noop'\n\nmatchAll = /./\nBREAK = Symbol()\n\nPattern = valido.get 'string|regexp?'\n\nconfigTypes = valido\n  name: 'string?'\n  prefix: 'string?'\n\nclass Router\n  constructor: (config = {}) ->\n    assertValid config, configTypes\n    @name = config.name if config.name\n\n    if prefix = config.prefix\n      unless /^\\/.+\\/$/.test prefix\n        throw Error '`prefix` must begin and end with /'\n      @prefix = prefix\n      @_prefixRE = new RegExp '^' + prefix\n    else\n      @prefix = '/'\n      @_prefixRE = matchAll\n\n    @_routes = []\n    @_matcher = noop.true\n    @_blacklist = noop.false\n    @\n\n  match: (path) ->\n\n    if @_matcher isnt noop.true\n      throw Error 'The matcher is already set'\n\n    @_matcher =\n      if typeof path is 'function' then path\n      else PathMatcher.create path\n\n    return this\n\n  blacklist: (fn) ->\n\n    if @_blacklist isnt noop.false\n      throw Error 'The blacklist is already set'\n\n    assertValid fn, 'function'\n    @_blacklist = fn\n    return this\n\n  listen: (arg) ->\n\n    # Both verb and path are omitted.\n    if arguments.length is 1\n      assertValid arg, ['function', Route, Router]\n      @_routes.push arg\n      return this\n\n    # The verb and path both exist.\n    if arguments.length is 3\n      [verb, path, fn] = arguments\n\n    # The verb or path has been omitted.\n    else if typeof arguments[0] is 'string'\n      if /^[A-Z\\|]$/.test arguments[0]\n      then [path, fn] = arguments\n      else [verb, fn] = arguments\n\n    # Regular expressions can be used for both verb and path.\n    else if arguments[0] instanceof RegExp\n      if /^[A-Z\\|]$/.test arguments[0]\n      then [path, fn] = arguments\n      else [verb, fn] = arguments\n\n    assertValid verb, Pattern\n    assertValid path, Pattern\n    assertValid fn, 'function'\n\n    route = new Route {verb}\n\n    if path\n    then route.match path, fn\n    else route._responder = fn\n\n    @_routes.push route\n    return route\n\n  extend: (prefix, plugins) ->\n\n    if arguments.length is 1\n      plugins = prefix\n      prefix = ''\n\n    if Array.isArray plugins\n      for plugin in plugins\n        @extend prefix, plugin\n\n    else\n      assertValid plugins, 'function'\n      plugins.call router = new Router {prefix}\n      @_routes.push router\n\n    return this\n\n  bind: -> @_exec.bind this\n\n  _match: (req, path) ->\n    if @_prefixRE.test path\n      return @_matcher req, path\n\n  _exec: (req, res) ->\n\n    {prefix} = this\n    if req.prefix\n      prefix = req.prefix + prefix.slice 1\n\n    {path} = req\n    if prefix isnt '/'\n      req.prefix = prefix\n      path = path.slice prefix.length - 1\n\n    if val = @_blacklist req, path\n      return val if val isnt true\n      return 403\n\n    {next} = req\n    req.next = noop\n    req.BREAK = BREAK\n\n    for route in @_routes\n\n      unless isFunction = typeof route is 'function'\n        continue unless route._match req, path\n\n      if isFunction\n      then val = await route req, res\n      else val = await route._exec req, res\n      break if val or res.headersSent\n\n    req.next = next\n    if val isnt BREAK\n      return val\n\nmodule.exports = Router\n\n# Verb shortcuts\n['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD']\n  .forEach (verb) ->\n    Router::[verb] = ->\n      @listen verb, ...arguments\n    return\n"
  ]
}
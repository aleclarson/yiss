{
  "version": 3,
  "file": "PathMatcher.js",
  "sourceRoot": "..",
  "sources": [
    "src/PathMatcher.coffee"
  ],
  "names": [],
  "mappings": ";AACA,IAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA;;AAAA,OAAO,CAAC,MAAR,GAAiB,QAAA,CAAC,IAAD,CAAA;AAEf,MAAA;EAAA,KAAA,GACK,OAAO,IAAP,KAAe,QAAlB,GACK,SAAA,CAAU,IAAV,CADL,GAEK;EAEP,IAAA,CAAO,SAAS,CAAC,IAAV,CAAe,KAAK,CAAC,MAArB,CAAP;IACE,MAAM,KAAA,CAAM,2BAAN,EADR;;AAGA,SAAO,QAAA,CAAC,GAAD,EAAM,IAAN,CAAA;AACL,QAAA;IAAA,IAAG,CAAA,GAAI,KAAK,CAAC,IAAN,CAAW,IAAX,CAAP;MACE,IAAG,CAAC,CAAC,MAAF,GAAW,CAAd;QACE,GAAG,CAAC,MAAJ,GAAa,WAAA,CAAY,CAAZ,EAAe,KAAK,CAAC,MAArB,EADf;;AAEA,aAAO,KAHT;;EADK;AAVQ,EAAjB;;;;;AAoBA,WAAA,GAAc,QAAA,CAAC,MAAD,EAAS,KAAT,CAAA;AACZ,MAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA;EAAA,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,IAAd;EACT,KAAS,wFAAT;IACE,MAAO,CAAA,KAAM,CAAA,CAAA,GAAI,CAAJ,CAAN,IAAgB,CAAA,GAAI,CAApB,CAAP,GAAgC,MAAO,CAAA,CAAA;EADzC;SAEA;AAJY;;AAMd,OAAA,GAAU;;AACV,SAAA,GAAY,QAAA,CAAC,IAAD,CAAA;AACV,MAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,KAAA,EAAA;EAAA,KAAA,GAAQ,CAAC,GAAD;EACR,MAAA,GAAS;EAET,CAAA,GAAI;AACJ,SAAA,IAAA;IACE,CAAA,GAAI,OAAO,CAAC,IAAR,CAAa,IAAb;IAEJ,CAAA,GAAO,CAAH,GAAU,CAAC,CAAC,KAAZ,GAAuB,IAAI,CAAC;IAChC,IAAwC,CAAA,GAAI,CAA5C;MAAA,KAAK,CAAC,IAAN,CAAW,QAAA,CAAS,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,CAAT,CAAX,EAAA;;IAEA,IAAA,CAAa,CAAb;AAAA,YAAA;;IACA,CAAA,GAAI,CAAA,GAAI,CAAE,CAAA,CAAA,CAAE,CAAC;IACb,KAAK,CAAC,IAAN,CAAW,CAAE,CAAA,CAAA,CAAF,IAAQ,WAAnB;IACA,MAAM,CAAC,IAAP,CAAY,CAAE,CAAA,CAAA,CAAd;EATF;EAWA,KAAK,CAAC,IAAN,CAAW,GAAX;EACA,KAAA,GAAQ,IAAI,MAAJ,CAAW,KAAK,CAAC,IAAN,CAAW,EAAX,CAAX;EACR,KAAK,CAAC,MAAN,GAAe;SACf;AAnBU;;AAqBZ,QAAA,GAAW,QAAA,CAAC,IAAD,CAAA;SACT,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,KAApB,CACE,CAAC,OADH,CACW,WADX,EACwB,IADxB,CAEE,CAAC,OAFH,CAEW,SAFX,EAEsB,MAFtB,CAGE,CAAC,OAHH,CAGW,KAHX,EAGkB,QAHlB;AADS",
  "sourcesContent": [
    "\nexports.create = (path) ->\n\n  regex =\n    if typeof path is 'string'\n    then pathRegex path\n    else path\n\n  unless /^\\^\\\\\\//.test regex.source\n    throw Error '`path` must begin with ^/'\n\n  return (req, path) ->\n    if m = regex.exec path\n      if m.length > 1\n        req.params = buildParams m, regex.params\n      return true\n\n#\n# Helpers\n#\n\nbuildParams = (values, names) ->\n  params = Object.create null\n  for i in [1 ... values.length]\n    params[names[i - 1] or i - 1] = values[i]\n  params\n\nparamRE = /:([^./\\(-]+)(\\([^\\)]+\\))?/g\npathRegex = (path) ->\n  parts = ['^']\n  params = []\n\n  i = 0\n  loop\n    m = paramRE.exec path\n\n    j = if m then m.index else path.length\n    parts.push sanitize(path.slice i, j) if i < j\n\n    break unless m\n    i = j + m[0].length\n    parts.push m[2] or '([^./-]+)'\n    params.push m[1]\n\n  parts.push '$'\n  regex = new RegExp parts.join ''\n  regex.params = params\n  regex\n\nsanitize = (part) ->\n  part.replace /\\./g, '\\\\.'\n    .replace /\\*\\*\\/\\*/g, '.+'\n    .replace /\\*\\*\\//g, '.+\\/'\n    .replace /\\*/g, '[^\\/]+'\n"
  ]
}
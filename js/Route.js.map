{
  "version": 3,
  "file": "Route.js",
  "sourceRoot": "..",
  "sources": [
    "src/Route.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "PathMatcher = require './PathMatcher'\nassertValid = require 'assertValid'\nsliceArray = require 'sliceArray'\nisValid = require 'isValid'\nvalido = require 'valido'\nnoop = require 'noop'\n\nRouteConfig = valido\n  verb: 'string|regexp'\n\nclass Route\n  constructor: (config) ->\n    assertValid config, RouteConfig\n    @_verb = new RegExp '^(' + config.verb + ')$'\n    @_matcher = noop.true\n    @_responder = null\n    @\n\n  query: (arg) ->\n    if arguments.length > 1\n      arg = sliceArray arguments\n\n    if @_queryType isnt undefined\n      throw Error 'Cannot call `query` more than once per route'\n\n    @_queryType = valido arg\n    @_queryType.strict = true\n    return\n\n  body: (arg) ->\n    if arguments.length > 1\n      arg = sliceArray arguments\n\n    if @_body isnt undefined\n      throw Error 'Cannot call `body` more than once per route'\n\n    @_body = arg\n\n    # Passing `true` means the body must exist, but can be any type.\n    if arg isnt true\n      @_bodyType = validateBody arg\n\n      # Shapes cannot have unknown properties.\n      if isValid arg, 'object'\n        @_bodyType.strict = true\n        return\n\n  listen: (responder) ->\n    if @_responder\n      if Array.isArray @_responder\n      then @_responder.push responder\n      else @_responder = [@_responder, responder]\n    else @_responder = responder\n    return this\n\n  match: (path, responder) ->\n\n    if @_matcher isnt noop.true\n      throw Error 'The matcher is already set'\n\n    if typeof path is 'function'\n      @_matcher = path\n    else\n      @_matcher = PathMatcher.create path\n      @_path =\n        if typeof path is 'string'\n        then path\n        else path.source\n\n    @listen responder if responder\n    return this\n\n  _match: (req, path) ->\n    if @_verb.test req.method\n      return @_matcher req, path\n\n  _exec: (req, res) ->\n\n    if oops = @_validateQuery req.query\n      return {error: oops 'query'}\n\n    if @_body and !req.body\n\n      # Read the body.\n      req.body = await req.readBody\n        json: @_body is 'object' or isValid @_body, 'object'\n\n      if req.body is null\n        return {error: 'Missing body'}\n\n      # Validate the body.\n      if @_bodyType\n\n        if @_bodyType.name is 'string'\n          req.body = req.body.toString()\n\n        else if oops = @_bodyType.assert req.body\n          return {error: oops 'body'}\n\n    if Array.isArray @_responder\n      for fn in @_responder\n        return val if val = await fn req, res\n\n    else if fn = @_responder\n      return val if val = await fn req, res\n\n  _validateQuery: (query) ->\n    if type = @_queryType\n      return type.assert query\n\nmodule.exports = Route\n\nvalidateBody = (type) ->\n\n  if valido.is type\n    return type\n\n  if isValid type, 'object|array|function'\n    return valido type\n\n  if isValid type, 'string'\n    return valido.get type\n"
  ]
}
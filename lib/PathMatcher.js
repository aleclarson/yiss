// Generated by CoffeeScript 2.3.0
var buildParams, paramRE, pathRegex, sanitize;

exports.create = function(path) {
  var regex;
  regex = typeof path === 'string' ? pathRegex(path) : path;
  if (!/^\^\\\//.test(regex.source)) {
    throw Error('`path` must begin with ^/');
  }
  return function(req, path) {
    var m;
    if (m = regex.exec(path)) {
      if (m.length > 1) {
        req.params = buildParams(m, regex.params);
      }
      return true;
    }
  };
};


// Helpers

buildParams = function(values, names) {
  var i, k, params, ref;
  params = Object.create(null);
  for (i = k = 1, ref = values.length; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
    params[names[i - 1] || i - 1] = values[i];
  }
  return params;
};

paramRE = /:([^.\/\(-]+)(\([^\)]+\))?/g;

pathRegex = function(path) {
  var i, j, m, params, parts, regex;
  parts = ['^'];
  params = [];
  i = 0;
  while (true) {
    m = paramRE.exec(path);
    j = m ? m.index : path.length;
    if (i < j) {
      parts.push(sanitize(path.slice(i, j)));
    }
    if (!m) {
      break;
    }
    i = j + m[0].length;
    parts.push(m[2] || '([^./-]+)');
    params.push(m[1]);
  }
  parts.push('$');
  regex = new RegExp(parts.join(''));
  regex.params = params;
  return regex;
};

sanitize = function(part) {
  return part.replace(/\./g, '\\.').replace(/\*\*\/\*/g, '.+').replace(/\*\*\//g, '.+\/').replace(/\*/g, '[^\/]+');
};

//# sourceMappingURL=PathMatcher.js.map
